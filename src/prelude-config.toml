# gobble the first n characters of each lines
gobble = 0
# can be break line before these characters
break_at = [' ', "\t"]
# break line indent
break_indent = 2
# whether replace tab to spaces
replace_tab = true
# counts of spaces when replace tab
tabs_len = 2
# lines of text to be highlight
lines = [0, 0]
# do not break
# do_not_break = ['<item>', ...]
# where '<item>' is a '<Regular Expression>' or '\I<Regular Expression>' or '\T<TeX Regular Expression>'
# regular expression (both TeX and text) must be start-anchored (i.e., '^\\relax')
do_not_break = []
# array of lexer rules when parse TeX text
# lexer = [<item>, ...]
# where <item> is ['<start>', '<end>', <action>]
# where '<start>' and '<end>' are '<line no>' or [<line no>, '<column>'] or '' or '\L' or '<TeX Regular Expression>' or
# '\T<TeX Regular Expression> or '\I<Regular Expression>' or '\L<string>'
# regular expression (both TeX and text) must be end-anchored (i.e., '\I^\\relax$')
# where '<action>' is { action="EndLine", value=<integer> } or { action="CatCode", value=<catcode action> },
# where <catcode action> is '<ctab name>' or [ [<char>, '<catcode>'], ... ]
lexer = []
# characters which are needed to be replaced
# is a character array or a string 
char_replacements = []
# string array
# ranges which are needed to be enabled
enabled_ranges = []

[ranges]
# '<key>' = <key-values table>
# if '<key>' starts with '+', texhigh will ignore the '+' and the following '[..]',
# i.e, the three different keys 'mykey', '+mykey', '+[some]mykey' are all identified as 'mykey'.
# escape
# texhigh is according to the existence of <remove_start> key to detect whether a range is escaped or not.
# keys:
# <start> is '<TeX regular expression>' or '\T<TeX Regular Expression>' or '\I<Regular Expression>' or '\L<plain text>' or
# { literal: '<plain text>' } or { 'regex': <Regular Expression> } or { 'regtex': <TeX Regular Expression> } or
# { 'start': <start>, arguments: <arguments>, start_is_arg: <start_is_arg> }.
# regular expression (both TeX and text) must be start-anchored (i.e., '\I^\\relax')
# <arguments> is the ltcmd (xparse) argument spec.
# <remove_start> will remove the starting component of a range.
# <use_argument> will remove the delimiters or braces of a argument but only if <remove_start> is also true.
# <insert_brace> will insert a `{` before the arguments and insert a `}` after the arguments.
# if <use_argument> is true, <insert_ending> will insert the ending tokens after the range if the argument is one of `u`, `u`, `^^J`.
# <in_comments> sets the region of a range to be detected, can be "required", "never", "any".
# <start_is_arg> sets if treat <start> as a part of argument
# <skip_if_pre> = [ 'Regular Expression', ... ], if the source before the <start> matches regex, it will ignore this range.
# <skip_if_post> = [ 'Regular Expression', ... ], if the source after the <start> matches regex, it will ignore this range.
'+[$$]escapemath' = { start='^\cM\$', arguments='u{$}', remove_start=false }
# '+[$$]escapemath' = { start='^\cM\$', arguments='r$$', remove_start=false, start_is_arg=true }
'+[()]escapemath' = { start='^\c{\(}', arguments='u\)', remove_start=false }
'[$$]escapeinside' = { start='^\cM\$', arguments='u{$}', remove_start=true, use_argument=true }
'[||]escapeinside' = { start='^\cO\|', arguments='u{|}', remove_start=true, use_argument=true }
'[]texcl' = { start='^\cC.', arguments='^^J{t}', remove_start=true, use_argument=true, insert_ending=true, insert_brace=true }
'[e ]texcl' = { start='^\cC.e\ ', arguments='^^J{t}', remove_start=true, use_argument=true, insert_ending=true }
# normal
# keys:
# <start>
# <arguments>
# <insert_ending>
# <in_comments>
# <start_is_arg>
# <args_numbered> sets if range names use arg spec name or arg position, i.e, 'argument.o' or 'argument.1'.
# <skip_if_pre>
# <skip_if_post>
usepackage = { start='^(?:\c{usepackage}|\c{RequirePackage})', arguments='omo' }
documentclass = { start='^\c{document(?:class|style)}', arguments='om' }
comment = { start='^\cC.(?:$|[\c[JS].\w])', arguments='^^J{f}' }

# category of characters
[char_categories]
# symbol = '<Regular Expression>'
# symbol = ['<item>', ...]
# where '<item>' is a character or '\I<Regular Expression>' or '\L<character>'
# eg. symbol = ['$', '\I[\ \\#%&]', '\L|']

[cs_categories]
# key = '<Regular Expression>'
# key = ['<item>', ...]
# where '<item>' is a '<cs name>' or '\I<Regular Expression>' or '\L<cs name>'
'latex.document' = [
    "DocumentMetadata", "documentclass", "documentstyle", "begin", "end", "usepackage",
    "title", "author", "date", "thanks", "maketitle",
    "frontmatter", "mainmatter", "backmatter", "tableofcontents", "listoffigures", "listoftables", "appendix",
    "input", "include", "includeonly",
    "part", "chapter", "section", "subsection", "subsubsection", "subsubsection", "paragraph", "subparagraph",
    "thepart", "thechapter", "thesection", "thesubsection", "thesubsubsection", "thesubsubsection", "theparagraph", "thesubparagraph",
    "abstractname", "appendixname", "bibname", "chaptername", "contentsname", "indexname", "listfigurename", "listtablename", "partname", "refname",
    "clearpage", "cleardoublepage", "pagenumbering", "makeindex", "index", "label", "ref", "footnote", "footnotetext", "footnotemark",
    "par", "underline", "everypar", "everymath", "everydisplay",
    "newcounter", "counterwithin", "counterwithout", "hspace", "enspace", "quad", "qquad", "hrulefill", "dotfill",
    "vspace", "smallskip", "medskip", "bigskip", "addvspace", "addpenalty", "newline",
    "rule", "mbox", "makebox", "parbox", "fbox", "framebox", "raisebox",
    "normalfont", "normalshape", "normalsize", "normalcolor", "color", "pagecolor",
    "tiny", "scriptsize", "footnotesize", "small", "large", "Large", "LARGE", "huge", "HUGE",
    "rm", "rmfamily", "sf", "sffamily", "tt", "ttfamily", "textrm", "texttt", "textsf",
    "mdseries", "bfseries", "textmd", "textbf",
    "itshape", "slshape", "swshape", "upshape", "scshape", "ulcshape",
    "textit", "textsl", "textsw", "textup", "textsc", "textulc",
    "AE", "DH", "DJ", "H", "L", "NG", "O", "OE", "P", "S", "SS", "TH",
    "ae", "p", "c", "i", "j", "k", "l", "ng", "o", "oe", "r", "ss", "t", "th", "u", "v",
]
'latex.programming' = [
    "makeatletter", "makeatother", "newcommand", "renewcommand", "providecommand",
    "newenvironment", "renewenvironment",
    "setlength", "addtolength", "settowidth", "settoheight", "settodepth", "newlength", "newcounter",
    "fpeval", "inteval", "dimeval", "skipeval",
]

[ctabs_fallback]
'cjk' = ['latex']
'cjkl3' = ['cjk', 'latex3']
'cjkcode' = ['cjk', 'latexcode']
'cjkl3code' = ['cjk', 'latex3code']
'document' = ['latex']
